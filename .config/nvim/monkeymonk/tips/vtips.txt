Use :undolist -1 to display the information about the last change.
Use :bnext! to switch to the next modified buffer, skipping the unchanged buffers.
Use :e! to discard unsaved changes and reload the current file from disk.
Press gvU to convert a visual selection to lowercase.
Combine macros with other Vim commands and motions to perform complex, repetitive tasks efficiently. You can even nest macros within macros to achieve more advanced automation.
Press q to stop recording a macro.
Use :normal followed by a sequence of normal mode commands to execute them on each line in the range. For example, :1,5normal! I// comments out lines 1 to 5 by inserting // at the beginning of each line.
Use * to search for the word under the cursor forward.
Use :%TOhtml to convert the current file to HTML format based on Vim's built-in grammar highlighting.
Use :q to quit.
Use text objects to work with larger units of text. For example, ip selects the entire paragraph, and it selects the text within the current HTML tag.
Press @a to execute the macro stored in register "a".
Use :registers to display the contents of all registers.
Use :g/<pattern>/normal <commands> to execute normal mode commands on lines matching a pattern.
Perform a series of commands to record the desired macro. These can be any Vim commands or motions.
Press H to move the cursor to the top line of the visible window.
Press u to undo the last change.
Use :bprevious to switch to the previous buffer.
Use :blast! to delete all buffers except the current one.
Use :% !shfmt to format shell scripts using the shfmt tool.
Use :tabfirst to move to the first tab.
Use :earlier <time> to revert the buffer to a previous state. <time> can be in various formats like 2m (2 minutes ago) or 2h30m (2 hours 30 minutes ago).
Use the r command followed by a character to replace the character under the cursor without entering replace mode. For example, ra replaces the character with 'a'.
Use qa to start recording a macro in register "a".
Use :%!sort to sort the lines in the current file.
Press $ to move the cursor to the end of the current line.
Press q{register} to start recording a macro, where {register} is the register name.
Prefix a command with ! to execute an external shell command from within Vim. For example, :!ls lists files in the current directory.
Use :v/<pattern>/d to delete all lines not matching a pattern.
Press 100@a to execute the macro stored in register "a" 100 times.
List all registers and their contents with the :registers command.
Use zc to close a fold.
You can use the dot command to repeat changes made in visual mode, such as text selection and indentation adjustments.
Use :bnext to switch to the next buffer.
Press :% !jq '.' to pretty print JSON data.
Use :set list to display invisible characters such as tabs and newlines.
Use /search_term to search for a specific term.
Press U to convert the selected text to uppercase in visual mode.
Use :vsplit to split the window vertically.
Use :% !column -t to format the selected text into columns.
Press N to jump to the previous occurrence of a mark named "n".
Use <Tab> to accept a suggested completion and move to the next completion match if multiple options are available.
Use gT to switch to the previous tab.
Use :, followed by normal <Tab>, to indent the visual selection one level deeper.
Press d to delete the selected text in visual mode.
Use t followed by a character to move just before the next occurrence of that character on the current line.
Use u to convert the selected text to lowercase in visual mode.
Press :%d to delete all lines in the current file.
Press :e! to discard changes and reload the current file.
Use :set undofile to enable undo history even after closing and reopening a file.
Use :m .-2 to move the current line two lines above.
Use yy to copy a line.
Press :, followed by normal c{desired_text}<Esc>, to replace the selected text with the desired text in a visual selection.
Avoid neglecting backups and version control. Regularly save and backup your files and utilize version control systems for better file management.
Press :blast! to delete all buffers except the current one, even if modified.
Use the expression register to perform on-the-fly calculations, dynamic substitutions, and any other mathematical operations directly within Vim.
Use f followed by a character to move to the next occurrence of that character on the current line.
Use :lvimgrep /pattern/ <files> to search for a pattern in multiple files and populate the location list.
Use :g/<pattern>/move <line> to move lines matching a pattern to a specific line number.
Press Ctrl + p to open the file finder and quickly navigate to a file.
Use :shell or :sh to open a subshell. Enter exit or Ctrl+D to return to Vim.
Use :join or :j to join the current line with the line below it.
Press Ctrl + x followed by Ctrl + n to decrease the number under the cursor in a visual selection.
Press tx to move the cursor to the character right before the next occurrence of "x".
The e motion moves the cursor to the end of the current word.
The list displayed by :scriptnames shows the order in which scripts were loaded, with the most recently loaded script at the top.
Use Ctrl+R to redo changes that have been undone.
Use u to undo the last action.
Use Ctrl+x followed by Ctrl+o to trigger omni-completion.
Type a mathematical expression in the command line after = and press Enter to evaluate it.
Use :tabprevious or gT to move to the previous tab.
Press Tx to move the cursor to the character right after the previous occurrence of "x".
Use :set autoindent to enable automatic indentation.
Use :set background=dark to set the color scheme for dark backgrounds.
Avoid using absolute line numbers in commands whenever possible. Utilize relative line numbers or visual selections for better flexibility.
Use :args {file1} {file2} ... to specify multiple files to be edited.
Use :badd {filename} to add a file to the buffer list without switching to it.
You can use :scriptnames to troubleshoot issues by identifying which scripts are being loaded and in what order.
Use dd to delete a line.
Press : in normal mode to enter the command-line mode, where you can execute various Vim commands.
Press u to undo the last change made. Repeat u to continue undoing changes.
Avoid long and complex regular expressions that can lead to slow search or substitution operations.
Use 'a to jump to the line containing mark "a".
Use :later <time> to bring the buffer forward to a more recent state.
Press Ctrl + w followed by t to move the current split window into a new tab.
Use O to insert a new line above the current line and enter insert mode.
Use :set cursorline to highlight the current line.
Press :ball to open all buffers in separate windows.
Use :cclose to close the quickfix window.
Use :oldfiles to display a list of recently edited files.
Use :set hidden to allow switching between buffers without saving changes.
Use :scriptnames to display a list of sourced scripts in Vim.
Use the dot command to repeat single-character changes, such as inserting or deleting a character.
Use :terminal to open a terminal window within Vim.
Use :lvimgrepadd /pattern/ <files> to add search results to the existing location list.
Press [[ to jump to the previous function or block.
Use :set scrolloff=<number> to keep a minimum number of lines visible above and below the cursor when scrolling.
Use :join! <range> to join a range of lines together, reversing the order.
Use gg to move to the beginning of the file.
Use :set spell to enable spell checking.
Use ' followed by a mark letter to jump to that mark.
Avoid excessive use of the "u" command to undo changes. Utilize Vim's fine-grained undo system and the "g-" command to undo changes more selectively.
Use :set wildmenu to enable command-line completion.
Use :set list to display invisible characters like tabs and line breaks.
Use . to jump to the last change in the current buffer.
Press :%s/old/new/gc to interactively replace all occurrences of "old" with "new".
Press :!{command} to execute a shell command.
Press Ctrl + x followed by Ctrl + l to open the file explorer.
Install plugins like YouCompleteMe or coc.nvim to enhance autocompletion capabilities, offering features like language-specific completions and semantic suggestions.
Press :bf to switch to the first buffer.
Press G to move the cursor to the last line of the file.
Use ^ to jump to the location where the last insert or change started.
Press gv to reselect the last visual selection.
Press w to move the cursor to the beginning of the next word.
Use <Tab> for command-line completion. Pressing <Tab> will autocomplete commands, file names, and other elements based on the context.
Use :reg to display the contents of all registers, including macros.
Press Ctrl + a to increment a number under the cursor.
Use <Ctrl>+<R>= to enter the expression register for performing calculations.
Use ma to create a mark named "a" at the current cursor position.
Press A to append text at the end of the current line.
Use :bprevious to switch to the previous buffer/file.
Use parentheses to group and prioritize calculations. For example, <Ctrl>+<R>=3*(4+2) will calculate the result of the expression 3*(4+2).
Use :set spell! to toggle spell checking on and off during your editing session.
Press ^ to jump to the start of the last edited line.
Use >> to indent the current line.
Use :set paste before pasting code from an external source to preserve formatting.
Use the g flag with the :substitute command (:s) to perform a global replace in replace mode. For example, :%s/old/new/g replaces all occurrences of "old" with "new" in the entire file.
Press zI to display detailed information about the word under the cursor according to Vim's built-in thesaurus.
Press gv to reselect the previously selected text.
Use :move to move lines within the buffer. For example, :5,10move 15 moves lines 5 to 10 after line 15.
Use :set smartcase to make searches case-sensitive if they contain uppercase letters.
Use :x to save changes and exit only if there were modifications.
Avoid relying solely on the default colorscheme. Customize your Vim colorscheme to improve readability and enhance your editing experience.
Use $ to move to the end of the current line.
Use ]s to move the cursor to the next misspelled word and [s to move to the previous misspelled word.
Use :set tabstop=<number> to set the number of spaces for a tab.
Press za to toggle folding (code folding).
Press ga to display the Unicode code point of the character under the cursor, as per Vim's built-in character information.
Use :ju[mps] to display a list of jump locations (including marks) that can be navigated using Ctrl+O and Ctrl+I.
Use 0 (zero) to move the cursor to the beginning of the current line.
Press ga to display the ASCII value of the character under the cursor.
Configure the complete option to include additional sources for autocompletion. For example, set complete+=i enables searching in included files.
Use ]} to move to the end of the current block or function.
Press ~ to toggle the case of the character under the cursor in replace mode.
Press Ctrl + w followed by v to split the current window vertically.
Press ggVGgq to reformat the entire file according to Vim's built-in text formatting rules.
Use :undo <undo number> to go back to a specific undo point in the undo history.
Use :set background=light to set the color scheme for light backgrounds.
Use :h pattern.txt to access Vim's built-in documentation on pattern matching and regular expressions.
Use gg to move the cursor to the first line of the file.
The dot command works on a linewise basis, repeating changes that affect whole lines.
Use ]] to move to the beginning of the next section or function.
Enable spell checking by running the command :set spell in normal mode. This activates spell checking for the current buffer.
Use {line_number}G to move the cursor to a specific line number.
Press Ctrl + v followed by Ctrl + j to join multiple lines into a single line.
Press :only to close all other windows and keep only the current window.
Use , to repeat the last f, F, t, or T command in the opposite direction.
Use text objects to work with larger units of text. For example, ci( changes the contents inside parentheses, and dat deletes a whole HTML tag.
Use :argdo to apply a command to all files in the argument list. For example, :argdo %s/foo/bar/g replaces all occurrences of "foo" with "bar" in each file.
Use :line-number to jump to a specific line number.
Press Ctrl + w followed by q to close the current split window.
Press g# to search for the word under the cursor and highlight all its occurrences, using Vim's built-in search functionality.
Press Ctrl + r to redo an action.
Use :copen to open the quickfix window, displaying the search results.
Press :bf to switch to the first buffer/file.
Use :undo to view a tree-like representation of the undo history.
Use :set title to set the window title to the current file name.
Press z= with the cursor on a misspelled word to open a suggestions menu. Navigate the menu and select the desired correction.
Use aw to select a word and include trailing whitespace in visual mode.
Customize autocompletion behavior by setting options like completeopt, which controls the behavior of the popup menu.
Use :set incsearch to highlight incremental search matches as you type.
Use :r!command to insert the output of a shell command at the current cursor position. For example, :r!date will insert the current date.
Avoid using the "hjkl" keys exclusively for movement. Explore other motion commands for more efficient navigation.
Use :join <line number> or :j <line number> to join the current line with a specific line number.
Use J to join the current line with the line below it.
Use gvU to convert a visual selection to uppercase.
Use :b {buffer_number} to switch to a specific buffer.
The dot command can repeat complex changes, including multi-line edits and text transformations.
Remove a word from the spell file to treat it as a misspelling using zw.
Use :lgrep /pattern/ <files> to search for a pattern in multiple files, displaying the results in a separate window.
Use & to repeat the last :s command.
Use :set numberwidth=<number> to set the width of line numbers.
Assign a macro to a specific key mapping in your .vimrc file for easy access. For example, map <F2> @a maps the macro in register a to the F2 key.
Use /search_term to jump to the last occurrence of "search_term" in the current buffer.
Use :grepadd /pattern/ <files> to add search results to the existing quickfix list.
Press gt to switch to the next tab.
Use :g/search_term/d to delete all lines containing a specific term.
Use :set autoread to automatically reload the file if it was changed externally.
Press Ctrl + a to increment a visual selection of numbers.
Use Fx to move the cursor backward to the previous occurrence of the character "x".
Use g~ to toggle the case of the characters in a visual selection.
Use :set nowrap to disable line wrapping.
Use gf to open the file under the cursor.
Use :w {filename} to save the current file with a different name.
Use ) to move to the beginning of the next sentence.
Combine the dot command with other commands to create powerful repetitive editing workflows.
Use :v/<pattern>/<command> to execute a command on lines not matching a pattern.
Use :set wildmenu to enable command-line tab completion.
Use :set hidden to keep buffers open when switching between files.
Use :set list! to toggle the display of invisible characters.
Press . to repeat the last change or action performed in normal mode.
Use < to jump to the start of the last visual selection.
If you accidentally undid too many changes, you can redo them using the :redo command or Ctrl+R.
Use :s/old/new/gn to perform a dry run of the search and replace, showing a preview of changes without actually modifying the text.
Use :split to split the window horizontally.
Leverage visual mode to select a range of text visually and then apply changes to the selection. For example, c in visual mode changes the selected text.
Avoid repeatedly switching between insert mode and normal mode. Make use of Vim's powerful editing capabilities in normal mode.
Use Ctrl+d to move forward half a screen.
Press G to move to the end of the file.
Use :lnext to jump to the next search result in the location list window.
Press Ctrl + ^ to switch between the current and alternate file.
Use :!% to execute the current file as a shell script. Make sure the file has executable permissions.
Use fx to move the cursor forward to the next occurrence of the character "x".
Press yy to copy the current line.
Use :set showcmd to show the current command being typed.
Avoid using repetitive commands manually. Utilize Vim's macros or command repetition features to automate repetitive tasks.
Use z= to invoke Vim's built-in spell checker and suggest corrections for misspelled words.
Press n to jump to the next occurrence of the search term.
Use Ctrl+u to move backward half a screen.
Press Ctrl + w followed by an arrow key to switch between open windows.
Press Esc to exit replace mode and return to normal mode.
Use :set shiftwidth=<number> to set the number of spaces for indentation.
Use ? followed by a word to search backward for that word.
Press :argdo {command} to execute a command on all the files currently being edited.
Press gg=G to automatically format the entire file according to Vim's built-in grammar rules.
Press dd to delete the current line.
Press <Ctrl+L> to clear and redraw the screen, useful if the display becomes garbled.
Use g~ to invert the case of the selected text, following Vim's built-in text manipulation rules.
Use Ctrl + t to create a new tab.
Use ( to move to the beginning of the previous sentence.
Use Ctrl + g to display the number of lines, words, and characters in the visual selection.
Press gd to jump to the local declaration of the variable under the cursor.
Press L to move the cursor to the bottom line of the visible window.
Use Ctrl + w followed by o to maximize the current split window.
Press + to jump to the first character of the last line in the previously edited file.
Press Ctrl + ] to jump to the definition of a function or tag.
Use :set hlsearch to highlight search results.
Use :vimgrep /pattern/ <files> to search for a pattern in multiple files.
Set a mark by pressing 'm' followed by a lowercase letter.
Use :e {filename} to open a specific file.
Use { to move to the beginning of the previous paragraph.
Use :normal <commands> to execute normal mode commands on a range of lines.
The dot command repeats changes made with other commands, such as dw (delete word) or dd (delete line).
Use :set ignorecase to make searches case-insensitive.
Use :w to save changes.
Press gg=G to auto-indent the entire file.
Use :set mouse=a to enable mouse support in Vim.
Use :r {filename} to insert the contents of a file at the current cursor position.
Press o to insert a new line below the current line and enter insert mode.
Use - to jump to the first character of the next-to-last line in the previously edited file.
Use :set expandtab to insert spaces instead of tab characters.
Use :%!command to filter the entire file through an external command.
Use :bmodified! to list all unmodified buffers.
Press gf to open the file whose path is under the cursor.
Use :g/<pattern>/ to apply a command to lines matching a pattern. For example, :g/foo/delete deletes all lines containing "foo".
Press n to go to the next occurrence of the search term.
Press e to move the cursor to the end of the current word.
Use :e! to reload the current file and discard unsaved changes.
Use zo to open a fold.
Use :%!grep search_term to filter the lines containing a specific term.
Use Ctrl+n to open the auto-complete menu while typing.
Use ; to repeat the last f, F, t, or T command in the same direction.
Press :bd to close the current buffer.
Use :s/old/new/gi to perform a case-insensitive search and replace.
Use Ctrl+f to move forward one full screen.
View all marks in the current file with the command :marks.
Use :cd {path/to/directory} to change the current working directory.
Use [{ to move to the beginning of the current block or function.
Use :set wrap to enable line wrapping.
Use :noh to clear the current search highlighting.
Use :lopen to open the location list window, displaying the search results.
Use :args! followed by a glob pattern to remove files from the argument list that match the pattern.
Use :join! <count> to join the current line with the previous <count> lines, reversing the order.
Press Ctrl + x followed by Ctrl + n to enable keyword completion.
Use [[ to move to the beginning of the previous section or function.
Add the c flag (:%s/old/new/gc) to confirm each replacement interactively.
Use :s/old/new/g to substitute "old" with "new" in the entire file.
Use :args! to clear all the arguments previously set.
Use :retab to convert tab characters to spaces or vice versa.
Use :s/old/new/gp to print lines containing matches for "old" and their corresponding replacements.
Press :%!sort -u to sort and remove duplicate lines in the current file.
Use :set modeline to enable per-file configuration with modelines at the bottom of the file.
Use :g/<pattern>/yank A to yank all lines matching a pattern into a register.
Press :% !sort -n to sort the lines numerically.
Use :marks to display a list of marks in the file.
Use / followed by a word to search for that word in the file.
Combine replace mode with other commands to perform advanced text transformations. For example, use c (change) followed by a motion to replace a specific range of text.
Press Ctrl+D to view a list of available completions when multiple options are possible.
Use :args +<file> to add a file to the end of the argument list.
Press :Explore to open the file explorer and navigate to the desired file or directory.
Press Ctrl + ] to jump to the definition of a function or variable.
Use / followed by a word to search forward for that word.
Use gt to switch to the next tab.
Use <Ctrl+X><Ctrl+L> to trigger whole-line completion, which completes the entire line based on previously typed lines in the buffer.
Use :e {path/to/file} to open a specific file.
Use gJ to join the current line with the line below it without inserting a space.
Enable autocompletion by adding set complete+=k to your .vimrc file. This activates keyword completion while typing.
Use :%s/$/suffix/ to add a suffix to the end of each line.
Use :lclose to close the location list window.
The output of :scriptnames includes both system scripts and user-defined scripts.
Press Ctrl+V followed by a sequence of characters to insert them literally in replace mode. This is useful when you need to replace multiple characters with a specific sequence.
Use g? followed by a motion command (e.g., g?w) to apply Vim's built-in rot13 encryption/decryption on the text within the specified motion.
Use # to search backwards for the word under the cursor.
Press :% !awk '!a[$0]++' to remove duplicate lines while preserving their order.
Enter replace mode by pressing the R key while in normal mode. This allows you to overwrite existing text directly.
Press Ctrl + n to enable auto-completion.
Combine operators like d (delete), c (change), or y (yank) with motions to perform targeted changes. For instance, d/foo deletes from the cursor position to the next occurrence of "foo."
Use :delmarks a to delete mark "a".
Append @@ to repeat the last macro replayed. It saves you from typing the register name explicitly.
Use :g/<pattern>/normal! <commands> to force execution of normal mode commands on lines matching a pattern.
Use :tabnew to open a new tab.
Use :!shell-command to execute a shell command without leaving Vim.
Use :sp {filename} to open a file in a new split window.
Press N to jump to the previous occurrence of the search term.
Press zv to open the current file in a vertical split window, according to Vim's built-in window splitting rules.
Use :sort to sort lines in the current range. For example, :1,10sort sorts lines 1 to 10 alphabetically.
Use :nohlsearch to turn off search result highlighting.
Use Ctrl + o to jump back to the previous cursor position.
Access the previous result by typing v:old_result in the expression register. For example, <Ctrl>+<R>=v:old_result*2 will double the previous result.
Use b to move the cursor to the beginning of the previous word.
Press > to jump to the end of the last visual selection.
Use :set to view and modify various Vim options. For example, :set number displays line numbers.
Press Ctrl + w followed by s to split the current window horizontally.
Use M to move the cursor to the middle line of the visible window.
Use @{register} to execute a macro stored in a specific register.
Use :set number to display line numbers in the current buffer.
For example, to calculate the result of an arithmetic expression, you can type <Ctrl>+<R>=2+2 and press Enter to get the result 4.
Use Ctrl + v followed by I to insert text at the beginning of each selected line.
Use :mksession {sessionname} to save the current session for later restoration.
The dot command can repeat changes made in insert mode, such as inserting text or making edits within a line.
Press gg to go to the beginning of the file.
Use Ctrl + x followed by Ctrl + i to increase the number under the cursor in a visual selection.
Press << to unindent the current line.
Use :e <filename> to open a file for editing.
Use p to paste a copied or deleted line.
Use H to move to the first visible line in the current window.
Use gJ to join the selected lines without adding any extra spaces or characters, as per Vim's built-in text joining rules.
Avoid relying solely on the mouse for editing tasks. Embrace Vim's keyboard-centric approach and leverage its powerful command-line capabilities.
Press Ctrl + w followed by - to decrease the size of the current split window.
Use :find {filename} to search for and open a file.
Press :bdelete {buffer_number} to delete a specific buffer.
Press ggVG to select the entire file.
Use w to move the cursor to the beginning of the next word and b to move to the beginning of the previous word.
Use :blast to switch to the last buffer/file.
Use Ctrl+i to jump to the next location (after using Ctrl+o).
Use Ctrl + u to move the cursor half a screen up.
Use :set hlsearch to highlight search matches.
Press :brewind to rewind to the first buffer, making it the current buffer.
Use the dot command with operators like c (change), d (delete), or y (yank) to repeat those operations.
Press :cd %:h to change the current working directory to the directory of the current file.
Press :bnext to switch to the next buffer.
Use :g!<pattern>/d to delete all lines not matching a pattern.
Use :join <count> to join the current line with the next <count> lines.
Use o to toggle the active end of the visual selection.
Use :cnext to jump to the next search result in the quickfix window.
Copy text to a named register using "ay to yank to register a.
Press Ctrl + l to redraw the screen and remove any artifacts.
Use :cfdo <command> to execute a command on each file in the quickfix list.
Use gd to jump to the local declaration of a variable or function.
Use Ctrl+o to jump to the previous location.
Use L to move to the last visible line in the current window.
Use b to move back to the beginning of the previous word.
Use :set autoindent to automatically indent new lines based on the previous line's indentation.
Press G to jump to the last line of the previously edited file.
Combine motions with a number prefix to repeat the motion. For example, 3j moves the cursor down three lines.
Use :blast to switch to the last buffer.
Use a number prefix before the macro replay command to repeat it multiple times. For instance, 3@a replays macro a three times.
Use :args **/*.txt to set all the matching .txt files in the current directory and its subdirectories as arguments.
Create custom completion mappings in your .vimrc file to trigger specific completion sources or actions. For example, inoremap <F5> <C-x><C-o> maps F5 to trigger omni completion.
Use :sort u to remove duplicate lines.
Use za to toggle the folding of a fold.
Press 0 to jump to the position where the last edit was made.
Press Ctrl + ww to quickly switch between open windows.
Press :browse oldfiles to browse and open a recently edited file.
Use Ctrl + w followed by + to increase the size of the current split window.
Use :args to list all the files currently being edited.
Avoid manually indenting or aligning code. Utilize Vim's indentation and formatting features, such as "gg=G" to auto-indent the entire file.
Use :%s/old/new/g to replace all occurrences of "old" with "new".
Use :args | argdo set syntax=python to set the syntax highlighting to Python for all files in the argument list.
Use :set syntax=on to enable syntax highlighting.
Access the system clipboard with the "+ register for copying and pasting between Vim and external programs.
Use zz to center the line with the cursor in the window.
Use :find {filename} to search for a file and open it.
Use :args to list the files currently set as arguments.
Use :undolist to view a list of changes with corresponding undo numbers and timestamps.
Use :sort! to sort lines in reverse order.
Press <Ctrl+P> in insert mode to perform backward keyword completion, which suggests previously typed words in the current buffer.
Use :m {line_number} to move the current line to a specific line number.
Press ] to jump to the end of the previously changed or yanked text.
Use % to jump to the matching parenthesis, bracket, or brace.
Use gg=G to re-indent the entire file.
Use :e! to discard changes and reload the file.
Press Ctrl + x followed by Ctrl + f to trigger Vim's built-in file path completion, based on the available directories and files in the system.
Use :cprev to jump to the previous search result in the quickfix window.
Combine replace mode with visual mode to replace a visually selected block of text. Enter replace mode and start typing to replace the selected block with the entered text.
Use :delmarks! to delete all marks in the current buffer.
Use # to search for the word under the cursor backward.
Use :%s/old/new/gc to substitute "old" with "new" in the entire file with confirmation.
Use :set mouse=a to enable mouse support.
Avoid excessive use of the arrow keys in normal mode. Instead, utilize Vim's motion commands.
Use :cnfile to jump to the next occurrence of the pattern in the current file.
Use :cd to change the current working directory within Vim.
Use :grep /pattern/ % to search for a pattern in the current file.
Use :argdo %s/old/new/g | update to perform a search and replace operation across multiple files.
Use Ctrl + w followed by r to swap the current split window with the one below it.
Use :s/old/new/g# to replace only matches in the lines specified by the last search pattern.
Add the c flag (:s/old/new/gc) to confirm each replacement on the current line.
Add custom word lists specific to your project or domain by creating a spell directory in your project and placing the word list file(s) inside it.
Combine changes with counts to repeat them a specific number of times. For instance, 3dd deletes three lines, and 2yw yanks two words.
Delete a mark by typing 'delm' followed by the lowercase letter.
Use n to jump to the next occurrence of a mark named "n".
Use :ls to list all open buffers.
Press :, followed by normal ., to repeat the last normal mode command on each line of a visual selection.
Press :Vex to open the file explorer in a vertical split window.
Press :%s/^\s+//g to remove leading whitespace from all lines.
Use :join <range> or :j <range> to join a range of lines together.
Use :m<number> to move a line to a specific line number.
Press is to select a sentence in visual mode.
Combine motions with marks (m) to navigate to specific locations in the file. For example, 'a moves the cursor to the line where mark a was set.
Replay a macro by pressing @ followed by the register name. For example, @a replays the macro stored in register a.
Use ]s and [s to move to the next and previous spelling errors.
Use :s/old/new/gI to perform a case-sensitive search and replace.
Use :g/<pattern>/d to delete all lines matching a pattern.
Use Ctrl+w followed by w to cycle between windows.
Use n to move to the next occurrence of the search term.
Use :bunload {buffer_number} to unload a specific buffer from memory, freeing up resources.
Combine motions with text objects to target specific ranges of text. For example, ci( changes the contents inside the parentheses, and di" deletes the text within double quotes.
Use :set showcmd to display partial commands in the last line of the screen.
Use :scriptnames! to display the sourced scripts in reverse order, starting from the oldest to the most recently loaded script.
Press N to go to the previous occurrence of the search term.
Use gU to convert the selected text to uppercase, following Vim's built-in text manipulation rules.
Press zN to toggle Vim's built-in netrw file explorer, allowing for easy navigation and manipulation of files and directories.
Use :grepadd /pattern/ % to add search results to the existing quickfix list for the current file.
Use :set syntax=off to disable syntax highlighting.
Use :earlier 1m to revert changes made in the past minute.
Use :tablast to move to the last tab.
Use :%s/\v<regex>/replacement/g to use a regular expression for substitution.
Use y to yank the selected text in visual mode.
Use :r !command to insert the output of a command below the current line.
Use :args *.txt to set all the matching .txt files in the current directory as arguments.
Add a word to the spell file to mark it as correctly spelled using zg while the cursor is on the word.
Use :bd to close the current buffer.
Use :set background=dark or set background=light to set the background color scheme.
Prefix a command with :silent to suppress normal output. For example, :silent w saves the current file without displaying the usual "file written" message.
Press :wq to save changes and quit.
You can also use built-in Vim functions and constants in your calculations. For example, <Ctrl>+<R>=sin(45) will calculate the sine of 45 degrees.
Customize the appearance of misspelled words using the spell highlight group. For example, :highlight SpellBad cterm=underline sets an underline style for misspelled words.
Press v to enter character-wise visual mode.
The file paths shown in :scriptnames represent the scripts that have been sourced, including their full paths.
Use the f command followed by a character to find the next occurrence of that character on the current line. For example, fa moves the cursor to the next occurrence of the letter 'a'.
Use :b <filename> to switch to a specific buffer.
Assign the result to a variable by using the let command. For example, <Ctrl>+<R>=let @a = 3*3 will store the result of 3*3 in register a.
Use :set scrollbind to bind two windows together for scrolling.
Use :set incsearch to highlight search matches as you type.
The dot command is a powerful tool for increasing productivity and performing repetitive edits efficiently in Vim.
Use :%!python to execute Python commands on the entire file.
Press :ls to list all open buffers.
Use V to enter line-wise visual mode.
Use :s/old/new/g to search and replace "old" with "new" on the current line.
Start recording a macro by pressing q followed by a register name, such as q and a letter (e.g., q a).
Use gq to reformat the selected lines according to Vim's built-in text formatting rules.
Use 0 (zero) to move to the beginning of the current line.
Press Ctrl + v to enter block-wise visual mode.
Use :set colorcolumn=<number> to set a vertical line at a specific column.
Use :grep /pattern/ <files> to search for a pattern in multiple files and populate the quickfix list.
Use ' to jump to the position where the cursor was last positioned in normal mode.
Use :changelist to display a list of changes that can be navigated using g; and g,.
Avoid using visual mode for simple operations that can be accomplished with more efficient commands in normal mode.
Use :%s//new/g to replace the last search term with "new".
Use :v/<pattern>/yank A to yank all lines not matching a pattern into a register.
Use :%s/old/new/g to search and replace "old" with "new" in the entire file.
Avoid neglecting to regularly update and maintain your Vim setup. Stay up to date with the latest Vim releases and plugin updates for improved performance and new features.
Press :bnext to switch to the next buffer/file.
Use G to move to the end of the file.
Use :{line_number} to jump to a specific line number.
Use Ctrl + w followed by h/j/k/l to navigate between split windows.
Use :cpfile to jump to the previous occurrence of the pattern in the current file.
Use :set tabstop=<number> to set the number of spaces a tab character represents.
Use * to search for the word under the cursor.
Use :vsplit {filename} to open a file in a new vertical split window.
Press :sfind {filename} to search for a file and open it in a new split window.
Use :set smartcase to make searches case-sensitive only if the pattern contains uppercase letters.
Press zz to center the current line in the visible window.
Use w to move to the beginning of the next word.
Change the spelling language by running :set spelllang=<language> in normal mode, replacing <language> with the desired language code (e.g., en, de, fr).
Use :help :<command> to get help on a specific command.
Use :delmarks a-c to delete marks "a", "b", and "c".
Use :args <directory>/*.txt to set all the matching .txt files in a specific directory as arguments.
Use } to move to the beginning of the next paragraph.
Use Ctrl+b to move backward one full screen.
Use :set number to display line numbers.
Use N to move to the previous occurrence of the search term.
Combine motions with operators like d (delete), c (change), or y (yank) to perform actions on specific text ranges. For example, dw deletes the current word, and c2w changes the next two words.
Press Ctrl + v to enter visual block mode and select rectangular blocks of text.
Press :bmodified to list all modified buffers.
Press :w to save the current file.
Press Ctrl + g to display the current file name and status.
Paste text from a named register with "ap to paste from register a.
Press :%!sh to execute shell commands on the entire file.
Avoid excessive reliance on external commands or shell escapes within Vim. Explore Vim's built-in functionality and plugins to achieve the desired tasks.
Avoid using a large number of plugins and configurations that can slow down Vim's startup time and performance.
Use :sort to sort lines alphabetically.
Press O (capital letter) to insert a new line above the current line and enter insert mode.
Use :set foldmethod=<method> to set the folding method (e.g., manual, syntax).
Use :args <filename1> <filename2> to set multiple files as arguments for Vim.
Use q again to stop recording the macro.
Combine calculations with other Vim commands to perform dynamic text transformations. For example, :s/foo/<Ctrl>+<R>=2+2/g will replace "foo" with the result of the expression 2+2.
Use zf followed by a motion command to create a fold.
Press :% !awk '{print $NF}' to extract the last column of each line.
Use :args <file1> | argdo <command> to execute a command on each file in the argument list.
Use :%normal @a to execute the macro stored in register "a" on each line of the entire buffer.
Use :!command to run a shell command from within Vim. For example, :!ls will list the files in the current directory.
Use :bd to delete a buffer.
Use Ctrl+w followed by h, j, k, or l to switch between split windows.
Use the arrow keys to navigate through your command history. Pressing the Up arrow key recalls previous commands, while the Down arrow key moves forward in the history.
Use ciw to change the contents of the current word.
Press G to go to the end of the file.
Avoid overly complex mappings or keybindings. Keep your mappings concise and intuitive for better productivity.
Use :%TOplain to convert the current file to plain text format, removing Vim's built-in grammar highlighting and formatting.
Avoid using long, single-line commands. Instead, break them down into smaller, more manageable commands for better readability and maintainability.
Use :tabnext or gt to move to the next tab.
Press :, followed by normal I{desired_text}<Esc>, to insert the desired text at the beginning of each line in a visual selection.
Press ci[ to change the contents inside square brackets.
Press :%s/^/prefix/ to add a prefix to each line.
Use ap to select a paragraph in visual mode.
Press Ctrl + f to move the cursor one page down.
Jump to the beginning of the line containing the mark with ` to the lowercase letter.
Press :e! {filename} to discard changes and reload a specific file.
Use :join! <line number> to join the current line with a specific line number above it, reversing the order.
Append a number to u (e.g., 3u) to undo multiple changes at once.
Press :pwd to display the current working directory.
Press :ball! to open all buffers, including the hidden and unlisted ones, in separate windows.
Use ci( to change the contents inside parentheses.
Use :help <keyword> to get help on a specific topic.
Press :q to quit.
Use :global/<pattern>/<command> to execute a command on lines matching a pattern.
Avoid excessive use of the "Ctrl + [key]" combinations for movement or operation. Utilize Vim's built-in motion commands or mappings for better efficiency.
Append a number to some commands to specify the number of times the command should be repeated. For example, :3delete deletes three lines.
Use :g!<pattern>/yank A to yank all lines not matching a pattern into a register.
Press ciw to change the contents of the current word.
Use :%s/^/prefix/ to add a prefix to the beginning of each line.
Avoid using excessive horizontal scrolling. Adjust Vim's settings or utilize split windows to view multiple parts of the file simultaneously.
Press <Ctrl+N> in insert mode to trigger keyword completion based on the current buffer. Repeat the command to cycle through the available completions.
Leverage dictionary completion by adding custom words to Vim's dictionary file. Use set dictionary+=/path/to/dictionary to include additional word sources.
Use :set nonumber to hide line numbers.
Use :set expandtab to use spaces instead of tabs for indentation.
Press :bprevious to switch to the previous buffer.
Use % to move to the matching parenthesis, bracket, or brace.
Use :sav {filename} to save the current file with a different name and continue editing the new file.
Press Ctrl+r to redo a change.
In the expression register, you can perform various mathematical operations like addition (+), subtraction (-), multiplication (*), division (/), and more.
Use :bdelete! to forcefully delete the current buffer, discarding any modifications.
Use e to move to the end of the next word.
Use T followed by a character to move just after the previous occurrence of that character on the current line.
Use :set relativenumber to display relative line numbers.
Use the :reg command to view the contents of registers and examine the stored macros.
Avoid modifying the original file without caution. Consider making a backup or working on a copy to prevent accidental data loss.
Press zt to scroll the current line to the top of the window.
Press <Ctrl+F> to open a command-line window, allowing you to enter and edit multiple lines of commands before executing them.
Use :help <command> to open the Vim help documentation for a specific command.
Press :e # to switch to the alternate file.
Press ]* to jump to the next occurrence of the word under the cursor.
Use :tabnew {filename} to open a file in a new tab.
Use :bw to close the current buffer without saving changes.
Use :, followed by normal A{desired_text}<Esc>, to append the desired text at the end of each line in a visual selection.
Press q@ to execute the last recorded macro.
Use [ to jump to the start of the previously changed or yanked text.
Press <Ctrl+C> to cancel the current command or action.
Use g? to invoke Vim's built-in rot13 encryption/decryption feature on the selected text.
Use :set ruler to display the cursor position and file statistics.
Use the Insert key to toggle between insert mode and replace mode.
Use :make to run the make command and compile your code.
Use :% !python -m json.tool to format JSON data.
Use :set relativenumber to display relative line numbers in the current buffer.
Use :set showmatch to highlight matching parentheses, brackets, and braces.
Use :join! to join the current line with the line above it, reversing the order.
Press p to paste the copied or deleted text.
Use :lprev to jump to the previous search result in the location list window.
Use :s/\v^(.{10}).*/\1/ to truncate each line to the first 10 characters.
Use :%y to yank (copy) all lines in the current file.
Use :windo to execute a command in each window.
In replace mode, pressing any alphanumeric key replaces the character under the cursor and moves the cursor to the right.
Press Ctrl + x followed by Ctrl + o to trigger Vim's built-in Omni completion, providing context-based suggestions for code completion.
Use F followed by a character to move to the previous occurrence of that character on the current line.
Press zR to expand all folds and reveal the entire content based on Vim's built-in folding mechanism.
Use :set shiftwidth=<number> to set the number of spaces for each indentation level.
Combine commands with motion commands to apply changes to specific text ranges. For example, d2w deletes the next two words, and c3j changes three lines downward.
Edit a macro by yanking it from one register and pasting it into another. For example, "ayy yanks the macro stored in register a, and "bp pastes it into register b.
Return to the previous location with `'.
Use :tabfind {filename} to search for a file and open it in a new tab.
Press :bdelete to delete the current buffer.
Use :q! to force quit without saving changes.
Use M to move to the middle visible line in the current window.
Jump to a mark by typing ' to the lowercase letter of the mark.
Use :set backup to create a backup file when saving changes.
Use :Sex to open the file explorer in a horizontal split window.
Use qA to append additional commands to a macro stored in register "a".
Press Ctrl + d to move the cursor half a screen down.
Use Ctrl + b to move the cursor one page up.
Use Ctrl+w followed by h, j, k, or l to move between split windows.
