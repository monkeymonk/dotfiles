#!/usr/bin/env bash

# Directories for installed projects
AUTOMATIC1111_DIR="$HOME/automatic1111"
COMFYUI_DIR="$HOME/ComfyUI"

# PID files to record process IDs
AUTOMATIC1111_PID_FILE="$AUTOMATIC1111_DIR/automatic1111.pid"
COMFYUI_PID_FILE="$COMFYUI_DIR/comfyui.pid"

install() {
  # -----------------------------
  # Docker (assumes Docker is installed)
  # -----------------------------
  # (Docker installation instructions are provided as comments.)
  # sudo apt-get update
  # sudo apt-get install ca-certificates curl
  # sudo install -m 0755 -d /etc/apt/keyrings
  # sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
  # sudo chmod a+r /etc/apt/keyrings/docker.asc
  # echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
  # $(. /etc/os-release && echo "${UBUNTU_CODENAME:-$VERSION_CODENAME}") stable" | sudo tee /etc/apt/sources.list.d/docker.list >/dev/null
  # sudo apt-get update
  # sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

  # -----------------------------
  # Ollama
  # -----------------------------
  echo "Installing Ollama..."
  curl -fsSL https://ollama.com/install.sh | sh

  echo "Pulling Ollama models..."
  ollama pull llama3:8b
  ollama pull llava:13b
  ollama pull deepseel-r1:14b
  ollama pull mistral

  # -----------------------------
  # Open Web UI (Docker container)
  # -----------------------------
  echo "Starting Open Web UI container..."
  docker run -d -p 3000:8080 --network=host \
    -e OLLAMA_BASE_URL=https://127.0.0.1:11434 \
    -v open-webui:/app/backend/data \
    --name open-webui --restart always \
    ghcr.io/open-webui/open-webui:main

  # -----------------------------
  # Python (via pyenv)
  # -----------------------------
  echo "Setting up Python 3.10 via pyenv..."
  pyenv install 3.10
  pyenv global 3.10

  # -----------------------------
  # AUTOMATIC1111
  # -----------------------------
  echo "Installing AUTOMATIC1111..."
  mkdir -p "$AUTOMATIC1111_DIR"
  cd "$AUTOMATIC1111_DIR" || exit 1
  wget -q https://raw.githubusercontent.com/AUTOMATIC1111/stable-diffusion-webui/master/webui.sh
  chmod +x webui.sh

  echo "Starting AUTOMATIC1111 web UI..."
  nohup ./webui.sh --api --listen >webui.log 2>&1 &
  echo "$!" >"$AUTOMATIC1111_PID_FILE"
  cd - >/dev/null

  # -----------------------------
  # ComfyUI
  # -----------------------------
  echo "Installing ComfyUI..."
  if [ ! -d "$COMFYUI_DIR" ]; then
    git clone https://github.com/comfyanonymous/ComfyUI.git "$COMFYUI_DIR"
  else
    echo "ComfyUI already exists at $COMFYUI_DIR"
  fi

  cd "$COMFYUI_DIR" || exit 1
  echo "Creating virtual environment for ComfyUI..."
  python3 -m venv venv
  source venv/bin/activate
  echo "Installing ComfyUI dependencies..."
  pip install torch torchvision torchaudio
  pip install -r requirements.txt
  echo "Starting ComfyUI..."
  nohup python3 main.py >comfyui.log 2>&1 &
  echo "$!" >"$COMFYUI_PID_FILE"
  deactivate
  cd - >/dev/null
}

update() {
  echo "Updating Ollama..."
  curl -fsSL https://ollama.com/install.sh | sh

  if [ -d "$COMFYUI_DIR" ]; then
    echo "Updating ComfyUI repository..."
    cd "$COMFYUI_DIR" || exit 1
    git pull
    cd - >/dev/null
  else
    echo "ComfyUI is not installed."
  fi
}

remove() {
  echo "Removing Open Web UI container..."
  docker rm -f open-webui
  echo "Removing AUTOMATIC1111 installation..."
  rm -rf "$AUTOMATIC1111_DIR"
  echo "Removing ComfyUI installation..."
  rm -rf "$COMFYUI_DIR"
}

start() {
  # -----------------------------
  # 1. Start Open Web UI container
  # -----------------------------
  if [ "$(docker ps -q -f name=open-webui)" == "" ]; then
    if [ "$(docker ps -aq -f name=open-webui)" != "" ]; then
      echo "Starting existing Docker container 'open-webui'..."
      docker start open-webui
    else
      echo "Docker container 'open-webui' does not exist. Please run '$0 install' first."
      exit 1
    fi
  else
    echo "Docker container 'open-webui' is already running."
  fi

  open http://127.0.0.1:8080 # Open Web UI (mapped host port)

  # -----------------------------
  # 2. Start AUTOMATIC1111 (if not running)
  # -----------------------------
  if [ -f "$AUTOMATIC1111_PID_FILE" ]; then
    AUTOMATIC_PID=$(cat "$AUTOMATIC1111_PID_FILE")
    if ps -p "$AUTOMATIC_PID" >/dev/null 2>&1; then
      echo "AUTOMATIC1111 web UI is already running."
    else
      echo "Stale PID file for AUTOMATIC1111 found. Starting again..."
      rm "$AUTOMATIC1111_PID_FILE"
      cd "$AUTOMATIC1111_DIR" || {
        echo "Directory '$AUTOMATIC1111_DIR' not found."
        exit 1
      }
      nohup ./webui.sh --api --listen >webui.log 2>&1 &
      echo "$!" >"$AUTOMATIC1111_PID_FILE"
      cd - >/dev/null
    fi
  else
    echo "Starting AUTOMATIC1111 web UI..."
    cd "$AUTOMATIC1111_DIR" || {
      echo "Directory '$AUTOMATIC1111_DIR' not found."
      exit 1
    }
    nohup ./webui.sh --api --listen >webui.log 2>&1 &
    echo "$!" >"$AUTOMATIC1111_PID_FILE"
    sleep 3
    cd - >/dev/null
  fi

  open http://127.0.0.1:7860 # AUTOMATIC1111

  # -----------------------------
  # 3. Start ComfyUI (if not running)
  # -----------------------------
  if [ -f "$COMFYUI_PID_FILE" ]; then
    COMFY_PID=$(cat "$COMFYUI_PID_FILE")
    if ps -p "$COMFY_PID" >/dev/null 2>&1; then
      echo "ComfyUI is already running."
    else
      echo "Stale PID file for ComfyUI found. Starting again..."
      rm "$COMFYUI_PID_FILE"
      cd "$COMFYUI_DIR" || {
        echo "Directory '$COMFYUI_DIR' not found."
        exit 1
      }
      source venv/bin/activate
      nohup python3 main.py >comfyui.log 2>&1 &
      echo "$!" >"$COMFYUI_PID_FILE"
      sleep 3
      deactivate
      cd - >/dev/null
    fi
  else
    echo "Starting ComfyUI..."
    cd "$COMFYUI_DIR" || {
      echo "Directory '$COMFYUI_DIR' not found."
      exit 1
    }
    if [ -f "venv/bin/activate" ]; then
      source venv/bin/activate
      nohup python3 main.py >comfyui.log 2>&1 &
      echo "$!" >"$COMFYUI_PID_FILE"
      sleep 3
      deactivate
    else
      echo "Virtual environment not found in $COMFYUI_DIR. Please run '$0 install' first."
      exit 1
    fi
    cd - >/dev/null
  fi

  open http://127.0.0.1:8188 # ComfyUI
}

stop() {
  # -----------------------------
  # 1. Stop AUTOMATIC1111 web UI
  # -----------------------------
  echo "Stopping AUTOMATIC1111 web UI..."
  if [ -f "$AUTOMATIC1111_PID_FILE" ]; then
    AUTOMATIC_PID=$(cat "$AUTOMATIC1111_PID_FILE")
    if [ -n "$AUTOMATIC_PID" ]; then
      echo "Attempting to kill process with PID $AUTOMATIC_PID..."
      kill -TERM "$AUTOMATIC_PID" 2>/dev/null
      sleep 2
      if ps -p "$AUTOMATIC_PID" >/dev/null 2>&1; then
        echo "Process still alive; sending SIGKILL..."
        kill -KILL "$AUTOMATIC_PID" 2>/dev/null
      fi
    fi
    rm "$AUTOMATIC1111_PID_FILE"
  else
    echo "PID file for AUTOMATIC1111 not found; attempting to kill any process on port 7860..."
    fuser -k 7860/tcp && echo "AUTOMATIC1111 web UI stopped." || echo "AUTOMATIC1111 web UI is not running."
  fi

  # -----------------------------
  # 2. Stop ComfyUI
  # -----------------------------
  echo "Stopping ComfyUI..."
  if [ -f "$COMFYUI_PID_FILE" ]; then
    COMFY_PID=$(cat "$COMFYUI_PID_FILE")
    if [ -n "$COMFY_PID" ]; then
      echo "Attempting to kill process with PID $COMFY_PID..."
      kill -TERM "$COMFY_PID" 2>/dev/null
      sleep 2
      if ps -p "$COMFY_PID" >/dev/null 2>&1; then
        echo "Process still alive; sending SIGKILL..."
        kill -KILL "$COMFY_PID" 2>/dev/null
      fi
    fi
    rm "$COMFYUI_PID_FILE"
    echo "ComfyUI stopped."
  else
    echo "PID file for ComfyUI not found; attempting pkill..."
    pkill -9 -f "python3 main.py" && echo "ComfyUI stopped." || echo "ComfyUI is not running."
  fi

  # -----------------------------
  # 3. Stop Open Web UI container
  # -----------------------------
  echo "Stopping Open Web UI container..."
  docker stop open-webui 2>/dev/null && echo "Open Web UI container stopped." || echo "Open Web UI container is not running."
}

# ======= Command line argument processing =======
case "$1" in
install)
  shift
  install
  ;;
update)
  shift
  update
  ;;
remove)
  remove
  ;;
start)
  start "$@"
  ;;
stop)
  stop "$@"
  ;;
*)
  echo "Usage: $0 {install|update|remove|start|stop}"
  exit 1
  ;;
esac
