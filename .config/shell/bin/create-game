#!/usr/bin/env bash
# Function to display help message
display_help() {
  cat <<EOF
Usage: $(basename "$0") [OPTIONS] [path]
Create a directory structure for a game project.

OPTIONS:
  -h, --help        Display this help message and exit

If no path is provided, the directory structure will be created in the current directory.
EOF
}

# Function to create directories
create_directories() {
  local project_name=$1

  mkdir -p "$project_name/addons"
  mkdir -p "$project_name/assets/characters" "$project_name/assets/fonts" "$project_name/assets/items" "$project_name/assets/textures" "$project_name/assets/sounds" "$project_name/assets/ui"
  mkdir -p "$project_name/framework"
  mkdir -p "$project_name/modules"
  mkdir -p "$project_name/scenes"
  mkdir -p "$project_name/src/configs" "$project_name/src/databases" "$project_name/src/utils"
  touch "$project_name/src/configs/game.gd"
  touch "$project_name/src/main.gd"

  echo "Directory structure created for $project_name"
}

# Main script
if [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
  display_help
  exit 0
fi

if [ $# -eq 0 ]; then
  read -rp "No path provided. Are you sure you want to create directories in the current directory? (Y/N): " input
  if [[ ! "$input" =~ ^[Yy]$ ]]; then
    echo "Operation canceled."
    exit 0
  fi

  create_directories "."
else
  game_name=$1

  if [[ ! "$game_name" =~ ^[a-zA-Z0-9_-]+$ ]]; then
    echo "Error: Invalid project name. Use only letters, numbers, underscores, and hyphens."
    exit 1
  fi

  if [ -d "$game_name" ]; then
    echo "Error: Directory '$game_name' already exists."
    exit 1
  fi

  mkdir "$game_name"
  create_directories "$game_name"
fi
