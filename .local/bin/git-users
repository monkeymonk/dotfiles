#!/usr/bin/env bash

# Git User Management Script
# Provides functionalities to manage Git users' configuration.
# Allows users to add, delete, list, activate, and view the currently active Git user.
# Author: StÃ©phan Zych

# To make the script executable as the "git-users" command, follow these steps:
# 1. Save the cleaned-up script to a file, for example, `git-users`.
# 2. Make the file executable with the following command:
#    ```bash
#    chmod +x git-users
#    ```
# 3. Move the script to a directory included in your `$PATH` environment variable or add its location to the `$PATH`. Example:
#    ```bash
#    mv git-users /usr/local/bin/git-users
#    ```
# 4. Now you can use `git-users` as a command in your terminal. Example usage:
#    - To add a Git user: `git-users add`
#    - To delete a Git user: `git-users delete`
#    - To list all Git users: `git-users list`
#    - To activate a Git user: `git-users activate [--local]`
#    - To view the currently active Git user: `git-users which`

# ======= Configuration =======
GIT_USERS_FILE="$HOME/.gitusers"

# ======= Helper functions =======
print_green() {
	local GREEN='\033[0;32m'
	local NC='\033[0m' # No Color
	echo -e "${GREEN}$1${NC}"
}

print_red() {
	local RED='\033[0;31m'
	local NC='\033[0m' # No Color
	echo -e "${RED}$1${NC}"
}

check_git_installed() {
	if ! command -v git &>/dev/null; then
		print_red "Git is not installed on this machine."
		exit 1
	fi
}

initialize_git_users_file() {
	if [ ! -f "$GIT_USERS_FILE" ]; then
		touch "$GIT_USERS_FILE"
		print_green "Initialized empty Git users file: $GIT_USERS_FILE"
	fi
}

# ======= Actions =======

git_add_user() {
	echo "Enter the name of the user:"
	read name

	echo "Enter the email of the user:"
	read email

	if grep -q "$name <$email>" "$GIT_USERS_FILE"; then
		print_red "User already exists: $name <$email>"
	else
		echo "$name <$email>" >>"$GIT_USERS_FILE"
		print_green "User added: $name <$email>"
	fi
}

git_delete_user() {
	if [ ! -s "$GIT_USERS_FILE" ]; then
		print_red "No Git users found."
		return
	fi

	echo "Select the user to delete:"

	select user in $(cat $GIT_USERS_FILE); do
		if [ -n "$user" ]; then
			read -p "Are you sure you want to delete $user? [Y/n] " choice
			case "$choice" in
			[Yy]*)
				sed -i "/$user/d" "$GIT_USERS_FILE"
				print_green "User deleted: $user"
				break
				;;
			[Nn]*)
				print_green "Operation cancelled."
				break
				;;
			*) print_red "Invalid choice." ;;
			esac
		else
			print_red "Invalid choice."
		fi
	done
}

git_list_users() {
	if [ ! -s "$GIT_USERS_FILE" ]; then
		print_red "No Git users found."
		return
	fi

	echo "Git users:"
	while IFS= read -r user; do
		echo " - $user"
	done <"$GIT_USERS_FILE"
}

git_activate_user() {
	local scope="--global"
	if [[ "$2" == "--local" ]]; then
		scope="--local"
	fi

	echo "Select the user to activate:"
	mapfile -t users < <(cat "$GIT_USERS_FILE")

	select user in "${users[@]}"; do
		if [ -n "$user" ]; then
			user_name=$(echo $user | cut -d'<' -f1 | xargs)
			user_email=$(echo $user | cut -d'<' -f2 | cut -d'>' -f1 | xargs)
			git config $scope user.name "$user_name"
			git config $scope user.email "$user_email"

			print_green "User activated: $user_name <$user_email> with scope $([ "$scope" == "--global" ] && echo "global" || echo "local")"
			break
		else
			print_red "Invalid choice."
		fi
	done
}

git_which_user_is_active() {
	local global_user_name=$(git config --global user.name)
	local global_user_email=$(git config --global user.email)
	local local_user_name=$(git config --local user.name)
	local local_user_email=$(git config --local user.email)

	echo "Git user configuration:"

	if [ -n "$global_user_name" ] || [ -n "$global_user_email" ]; then
		echo "  Global: $global_user_name <$global_user_email>"
	else
		print_red "  Global user not set"
	fi

	if [ -n "$local_user_name" ] || [ -n "$local_user_email" ]; then
		echo "  Local (current repository): $local_user_name <$local_user_email>"
	else
		echo "  Local (current repository) user not set"
	fi
}

# ======= Command line argument processing =======

check_git_installed
initialize_git_users_file

case "$1" in
add) git_add_user ;;
delete) git_delete_user ;;
list) git_list_users ;;
activate) git_activate_user "$@" ;; # Pass all arguments
which) git_which_user_is_active ;;
*) echo "Usage: $0 {add|delete|list|activate|which} [Use --local with 'activate' to apply to the current repository]${NC}" ;;
esac
